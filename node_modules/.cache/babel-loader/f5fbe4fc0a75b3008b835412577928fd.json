{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPanding, setIsPanding] = useState(true);\n  const [error, setError] = useState(null);\n  console.log('Fetch Started');\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          throw Error('Could not fetch blogs');\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsPanding(false);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          setIsPanding(false);\n          setError(err.message);\n        }\n      });\n    }, 100);\n    return () => abortCont.abort();\n  }, [url]);\n  console.log('Fetch Complete');\n  return {\n    data,\n    isPanding,\n    error\n  };\n};\n\n_s(useFetch, \"E+j9BVbFTNoYY1i4N5nCu+DGzNk=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/coding/pitch/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPanding","setIsPanding","error","setError","console","log","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","message","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEJU,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAEIV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACZ,GAAD,EAAM;AAAEa,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAApB,OAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,gBAAMC,KAAK,CAAC,uBAAD,CAAX;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OANL,EAOKJ,IAPL,CAOUb,IAAI,IAAI;AACVC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAXL,EAYKa,KAZL,CAYWC,GAAG,IAAI;AACV,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC3Bd,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAEO;AACHJ,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACc,GAAG,CAACE,OAAL,CAAR;AACH;AACJ,OAnBL;AAoBH,KArBS,EAqBP,GArBO,CAAV;AAuBA,WAAO,MAAMb,SAAS,CAACc,KAAV,EAAb;AACH,GA3BQ,EA2BN,CAACvB,GAAD,CA3BM,CAAT;AA6BAO,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEA,SAAO;AAAEP,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAvCD;;GAAMN,Q;;AAyCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n    const [data, setData] = useState(null);\r\n    const [isPanding, setIsPanding] = useState(true)\r\n    const [error, setError] = useState(null)\r\n\r\nconsole.log('Fetch Started')\r\n\r\n    useEffect(() => {\r\n        const abortCont = new AbortController()\r\n\r\n        setTimeout(() => {\r\n            fetch(url, { signal: abortCont.signal })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw Error('Could not fetch blogs')\r\n                    }\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    setData(data)\r\n                    setIsPanding(false)\r\n                    setError(null)\r\n                })\r\n                .catch(err => {\r\n                    if (err.name === 'AbortError') {\r\n                        console.log('fetch aborted')\r\n                    } else {\r\n                        setIsPanding(false)\r\n                        setError(err.message)\r\n                    }\r\n                })\r\n        }, 100)\r\n\r\n        return () => abortCont.abort()\r\n    }, [url])\r\n\r\n    console.log('Fetch Complete')\r\n\r\n    return { data, isPanding, error }\r\n}\r\n\r\nexport default useFetch"]},"metadata":{},"sourceType":"module"}